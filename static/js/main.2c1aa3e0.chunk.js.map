{"version":3,"sources":["tracks.js","App.js","serviceWorker.js","index.js"],"names":["drumsList","chordsList","voxList","App","useState","isLoaded","setLoaded","isPlaying","setPlaying","progress","chords","useRef","drums","vox","transport","current","Tone","Transport","useEffect","loop","bpm","value","loopStart","loopEnd","Player","url","pickRandomTrack","toMaster","sync","start","Buffer","on","tracks","getRandomInt","length","max","Math","floor","random","disabled","onClick","stop","newChords","newDrums","newVox","console","log","load","mute","round","completed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qSAAaA,EAAY,CAAC,mBAAoB,sBAAuB,sBAAuB,sBAAuB,gBAAiB,uBAAwB,oBAAqB,oBACpKC,EAAa,CAAC,wBAAyB,2BAA4B,2BAA4B,2BAA4B,oBAAqB,qBAAsB,yBAA0B,yBAChMC,EAAU,CAAC,mBAAoB,sBAAuB,sBAAuB,sBAAuB,gBAAiB,oBAAqB,oBCqHxIC,EAjHH,WAAO,IAAD,EAEeC,oBAAS,GAFxB,mBAERC,EAFQ,KAEEC,EAFF,OAGiBF,oBAAS,GAH1B,mBAGRG,EAHQ,KAGGC,EAHH,OAIiBJ,mBAAS,GAJ1B,mBAIRK,EAJQ,KAKTC,GALS,KAKAC,iBAAO,OAChBC,EAAQD,iBAAO,MACfE,EAAMF,iBAAO,MACbG,EAAYH,iBAAO,MACzBG,EAAUC,QAAUC,IAAKC,UAEzBC,qBAAU,WACPJ,EAAUC,QAAQI,MAAO,EACzBL,EAAUC,QAAQK,IAAIC,MAAQ,IAC9BP,EAAUC,QAAQO,UAAY,KAC9BR,EAAUC,QAAQQ,QAAU,KAM5Bb,EAAOK,QAAU,IAAIC,IAAKQ,OAAO,CAC9BC,IAAKC,EAAgBzB,GACrBkB,MAAM,IACNQ,WAAWC,OAAOC,QAErBjB,EAAMG,QAAU,IAAIC,IAAKQ,OAAO,CAC7BC,IAAKC,EAAgB1B,GACrBmB,MAAM,IACNQ,WAAWC,OAAOC,QAErBhB,EAAIE,QAAU,IAAIC,IAAKQ,OAAO,CAC3BC,IAAKC,EAAgBxB,GACrBiB,MAAM,IACNQ,WAAWC,OAAOC,QAGrBb,IAAKc,OAAOC,GAAG,QAAQ,WACpBzB,GAAU,QAEb,IAEH,IAwBMoB,EAAkB,SAACM,GACtB,MAAO,WAAaA,EAAOC,EAAaD,EAAOE,UAG5CD,EAAe,SAACE,GACnB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAmBhD,OACG,6BACG,4BAAQI,UAAWlC,EAAUmC,QAlDhB,WACZjC,EACDO,EAAUC,QAAQ0B,OAGlB3B,EAAUC,QAAQc,QAErBrB,GAAYD,KA2CT,eAGA,4BAAQgC,UAAWlC,EAAUmC,QA3CnB,WACb,IAAME,EAAYhB,EAAgBzB,GAC5B0C,EAAWjB,EAAgB1B,GAC3B4C,EAASlB,EAAgBxB,GAE/B2C,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAEZlC,EAAOK,QAAQgC,KAAKL,GACpB9B,EAAMG,QAAQgC,KAAKJ,GACnB9B,EAAIE,QAAQgC,KAAKH,KAgCd,WAGA,4BAAQL,UAAWlC,EAAUmC,QAxBhB,WAChB9B,EAAOK,QAAQiC,MAAQtC,EAAOK,QAAQiC,OAuBnC,eAGA,4BAAQT,UAAWlC,EAAUmC,QAvBjB,WACf5B,EAAMG,QAAQiC,MAAQpC,EAAMG,QAAQiC,OAsBjC,cAGA,4BAAQT,UAAWlC,EAAUmC,QAtBnB,WACb3B,EAAIE,QAAQiC,MAAQnC,EAAIE,QAAQiC,OAqB7B,YAGA,4BAAQR,QArBI,WACfK,QAAQC,IAAIV,KAAKa,MAAiC,IAA3BnC,EAAUC,QAAQN,aAoBtC,aACA,kBAAC,IAAD,CAAUyC,UAAWzC,MCtGV0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.2c1aa3e0.chunk.js","sourcesContent":["export const drumsList = [\"brakence_DNB.wav\", \"fortuneswan_DNB.wav\", \"HOLIDAYKISS_DNB.wav\", \"jack cates_ DNB.wav\", \"Moon_ DNB.wav\", \"Moore Kismet_DNB.wav\", \"VALENTINE_DNB.wav\", \"VeraMuch_DNB.wav\"]\nexport const chordsList = [\"brakence_Melodics.wav\", \"fortuneswan_Melodics.wav\", \"HOLIDAYKISS_Melodics.wav\", \"jack cates_ Melodics.wav\", \"MagLo_Melodic.wav\", \"Moon_ MELODICS.wav\", \"VALENTINE_Melodics.wav\", \"VeraMuch_Melodics.wav\"]\nexport const voxList = [\"brakence_Vox.wav\", \"fortuneswan_Vox.wav\", \"HOLIDAYKISS_Vox.wav\", \"jack cates_ Vox.wav\", \"Moon_ VOX.wav\", \"VALENTINE_Vox.wav\", \"VeraMuch_Vox.wav\"]","import React, { useState, useRef, useEffect } from \"react\";\nimport Progress from 'react-progressbar';\nimport \"./App.css\";\nimport Tone from \"tone\";\nimport { chordsList, drumsList, voxList } from \"./tracks.js\"\n\nconst App = () => {\n\n   const [isLoaded, setLoaded] = useState(false);\n   const [isPlaying, setPlaying] = useState(false);\n   const [progress, setProgress] = useState(0);\n   const chords = useRef(null);\n   const drums = useRef(null);\n   const vox = useRef(null);\n   const transport = useRef(null);\n   transport.current = Tone.Transport;\n\n   useEffect(() => {\n      transport.current.loop = true;\n      transport.current.bpm.value = 150;\n      transport.current.loopStart = \"0m\";\n      transport.current.loopEnd = \"8m\";\n\n      // new Tone.Loop(() => {\n      //    setProgress(Math.round(transport.current.progress*100));\n      // }, \"4n\").start();\n\n      chords.current = new Tone.Player({\n         url: pickRandomTrack(chordsList),\n         loop: true\n      }).toMaster().sync().start();\n\n      drums.current = new Tone.Player({\n         url: pickRandomTrack(drumsList),\n         loop: true\n      }).toMaster().sync().start();\n\n      vox.current = new Tone.Player({\n         url: pickRandomTrack(voxList),\n         loop: true\n      }).toMaster().sync().start();\n\n   \n      Tone.Buffer.on('load', () => {\n         setLoaded(true);\n      })\n   }, []);\n\n   const togglePlay = () => {\n      if (isPlaying) {\n         transport.current.stop();\n      }\n      else {\n         transport.current.start();\n      }\n      setPlaying(!isPlaying);\n   }\n\n   const shuffle = () => {\n      const newChords = pickRandomTrack(chordsList);\n      const newDrums = pickRandomTrack(drumsList);\n      const newVox = pickRandomTrack(voxList);\n\n      console.log(newChords);\n      console.log(newDrums);\n      console.log(newVox);\n\n      chords.current.load(newChords);\n      drums.current.load(newDrums);\n      vox.current.load(newVox);\n   }\n\n   const pickRandomTrack = (tracks) => {\n      return \"./audio/\" + tracks[getRandomInt(tracks.length)];\n   }\n\n   const getRandomInt = (max) => {\n      return Math.floor(Math.random() * Math.floor(max));\n   }\n\n   const muteChords = () => {\n      chords.current.mute = !chords.current.mute;\n   }\n\n   const muteDrums = () => {\n      drums.current.mute = !drums.current.mute;\n   }\n\n   const muteVox = () => {\n      vox.current.mute = !vox.current.mute;\n   }\n\n   const printProg = () => {\n      console.log(Math.round(transport.current.progress*100));\n   }\n\n   return (\n      <div>\n         <button disabled={!isLoaded} onClick={togglePlay}>\n            toggle play\n         </button>\n         <button disabled={!isLoaded} onClick={shuffle}>\n            shuffle\n         </button>\n         <button disabled={!isLoaded} onClick={muteChords}>\n            mute chords\n         </button>\n         <button disabled={!isLoaded} onClick={muteDrums}>\n            mute drums\n         </button>\n         <button disabled={!isLoaded} onClick={muteVox}>\n            mute vox\n         </button>\n         <button onClick={printProg}>show prog</button>\n         <Progress completed={progress}/>\n      </div>\n   );\n};\n\nexport default App;\n\n//mute button and lock button","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}